**# BackApi**# main.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

# Criando a aplicação FastAPI
app = FastAPI(title="API de Clientes", version="1.0")

# Modelo de dados do cliente (usando Pydantic para validação)
class Cliente(BaseModel):
    id: int
    nome: str
    email: str
    telefone: str
    endereco: str

# Banco de dados em memória (lista simples para exemplo)
clientes_db: List[Cliente] = []

# Rota inicial
@app.get("/")
def home():
    return {"mensagem": "Bem-vindo à API de Clientes!"}

# Criar cliente (POST)
@app.post("/clientes/", response_model=Cliente)
def criar_cliente(cliente: Cliente):
    # Verifica se já existe um cliente com o mesmo ID
    for c in clientes_db:
        if c.id == cliente.id:
            raise HTTPException(status_code=400, detail="ID já cadastrado")
    clientes_db.append(cliente)
    return cliente

# Listar todos os clientes (GET)
@app.get("/clientes/", response_model=List[Cliente])
def listar_clientes():
    return clientes_db

# Buscar cliente por ID (GET)
@app.get("/clientes/{cliente_id}", response_model=Cliente)
def buscar_cliente(cliente_id: int):
    for cliente in clientes_db:
        if cliente.id == cliente_id:
            return cliente
    raise HTTPException(status_code=404, detail="Cliente não encontrado")

# Atualizar cliente por ID (PUT)
@app.put("/clientes/{cliente_id}", response_model=Cliente)
def atualizar_cliente(cliente_id: int, cliente_atualizado: Cliente):
    for i, cliente in enumerate(clientes_db):
        if cliente.id == cliente_id:
            clientes_db[i] = cliente_atualizado
            return cliente_atualizado
    raise HTTPException(status_code=404, detail="Cliente não encontrado")

# Deletar cliente por ID (DELETE)
@app.delete("/clientes/{cliente_id}")
def deletar_cliente(cliente_id: int):
    for i, cliente in enumerate(clientes_db):
        if cliente.id == cliente_id:
            clientes_db.pop(i)
            return {"mensagem": "Cliente deletado com sucesso"}
    raise HTTPException(status_code=404, detail="Cliente não encontrado")
